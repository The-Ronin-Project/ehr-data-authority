[versions]
apache-kafka = "3.6.0"
dbrider = "1.41.0"
fhir-models = "1.3.0"
guava = "32.1.3-jre"
interop-common = "3.13.3"
interop-datalake = "8.4.2"
interop-ehr = "12.4.0"
interop-fhir = "8.10.3"
interop-gradle = "3.3.0"
interop-kafka = "8.5.1"
interop-validation = "3.2.1"
jackson = "2.15.3"
# @pin until INT-1988 resolved
kotlin = "1.8.22"
kotlin-logging = "3.0.5"
kotlinx-coroutines = "1.7.3"
kotlinx-serialization = "1.6.0"
# @pin INT-2283
ktor = "2.3.4"
ktorm = "3.6.0"
liquibase = "4.24.0"
# @pin until Spring 6
logstash = "7.3"
mockk = "1.13.8"
mockwebserver = "4.12.0"
mysql = "8.0.33"
ronin-kafka = "1.1.1"
ronin-test = "0.2.0"
# @pin until can move to JDK 17
spring-boot = "2.7.13"
testcontainers = "1.19.1"

[libraries]
common-fhir-r4-models = { module = "com.projectronin.fhir:common-fhir-r4-models", version.ref = "fhir-models" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }
interop-common = { module = "com.projectronin.interop:interop-common", version.ref = "interop-common" }
interop-commonHttp = { module = "com.projectronin.interop:interop-common-http", version.ref = "interop-common" }
interop-commonJackson = { module = "com.projectronin.interop:interop-common-jackson", version.ref = "interop-common" }
interop-commonKtorm = { module = "com.projectronin.interop:interop-common-ktorm", version.ref = "interop-common" }
interop-commonTestDb = { module = "com.projectronin.interop:interop-common-test-db", version.ref = "interop-common" }
interop-datalake = { module = "com.projectronin.interop.publish:interop-datalake", version.ref = "interop-datalake" }
interop-ehr-api = { module = "com.projectronin.interop.ehr:interop-ehr", version.ref = "interop-ehr" }
interop-ehr-fhir-ronin = { module = "com.projectronin.interop.ehr:interop-fhir-ronin", version.ref = "interop-ehr" }
interop-ehr-fhir-roninGenerators = { module = "com.projectronin.interop.ehr:interop-fhir-ronin-generators", version.ref = "interop-ehr" }
interop-fhir = { module = "com.projectronin.interop.fhir:interop-fhir", version.ref = "interop-fhir" }
interop-fhirGenerators = { module = "com.projectronin.interop.fhir:interop-fhir-generators", version.ref = "interop-fhir" }
interop-kafka = { module = "com.projectronin.interop.publish:interop-kafka", version.ref = "interop-kafka" }
interop-kafka-testing-client = { module = "com.projectronin.interop.publish:interop-kafka-testing-client", version.ref = "interop-kafka" }
interop-validation-client = { module = "com.projectronin.interop.validation:interop-validation-client", version.ref = "interop-validation" }
jackson-dataformat-xml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml", version.ref = "jackson" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "apache-kafka" }
kotlin-logging = { module = "io.github.microutils:kotlin-logging", version.ref = "kotlin-logging" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-serialization-jackson = { module = "io.ktor:ktor-serialization-jackson", version.ref = "ktor" }
ktorm-core = { module = "org.ktorm:ktorm-core", version.ref = "ktorm" }
ktorm-support-mysql = { module = "org.ktorm:ktorm-support-mysql", version.ref = "ktorm" }
liquibase-core = { module = "org.liquibase:liquibase-core", version.ref = "liquibase" }
logstash-logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "mockwebserver" }
mysql-connector-java = { module = "mysql:mysql-connector-java", version.ref = "mysql" }
rider-core = { module = "com.github.database-rider:rider-core", version.ref = "dbrider" }
ronin-kafka = { module = "com.projectronin:ronin-kafka", version.ref = "ronin-kafka" }
ronin-test-data-generator = { module = "com.projectronin.test:ronin-test-data-generator", version.ref = "ronin-test" }
spring-boot-parent = { module = "org.springframework.boot:spring-boot-parent", version.ref = "spring-boot" }
testcontainers-bom = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainers" }

[bundles]
data-generators = [
    "interop-fhirGenerators",
    "ronin-test-data-generator",
]
jackson = [
    "jackson-dataformat-xml",
    "jackson-dataformat-yaml",
    "jackson-datatype-jsr310",
    "jackson-module-kotlin",
]
ktor = [
    "ktor-client-auth",
    "ktor-client-cio",
    "ktor-client-content-negotiation",
    "ktor-client-core",
    "ktor-client-logging",
    "ktor-serialization-jackson",
]

[plugins]
interop-docker-integration = { id = "com.projectronin.interop.gradle.docker-integration", version.ref = "interop-gradle" }
interop-junit = { id = "com.projectronin.interop.gradle.junit", version.ref = "interop-gradle" }
interop-server-publish = { id = "com.projectronin.interop.gradle.server-publish", version.ref = "interop-gradle" }
interop-server-version = { id = "com.projectronin.interop.gradle.server-version", version.ref = "interop-gradle" }
interop-sonarqube = { id = "com.projectronin.interop.gradle.sonarqube", version.ref = "interop-gradle" }
interop-spring-boot = { id = "com.projectronin.interop.gradle.spring-boot", version.ref = "interop-gradle" }
interop-spring-framework = { id = "com.projectronin.interop.gradle.spring", version.ref = "interop-gradle" }
interop-version-catalog = { id = "com.projectronin.interop.gradle.version-catalog-update", version.ref = "interop-gradle" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
